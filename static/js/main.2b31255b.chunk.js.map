{"version":3,"sources":["App.js","serviceWorker.js","js/pages/Tabla.js","js/pages/Orden.js","index.js"],"names":["Component","Boolean","window","location","hostname","match","Tabla","props","onOrderRowClickHandler","e","hiddenElement","currentTarget","nextSibling","className","indexOf","classList","remove","add","onNewItemClickHandler","newItem","id","_","uniqueId","sku","state","newSku","name","newName","quantity","newQuantity","price","newPrice","setState","prevState","newOrderItems","onAddOrderClickHandler","newOrder","items","orders","isLoaded","fetch","method","headers","Headers","Authorization","then","response","json","evt","this","target","value","orderRowstyle","padding","lineHeight","orderDetailStyle","orderHeaderRow","itemRow","item","style","key","orderRows","map","order","onClick","colSpan","icon","faClipboardList","navbarHeader","Navbar","variant","Brand","href","Toggle","Collapse","Text","Container","Row","Col","Table","striped","bordered","hover","Form","length","Group","controlId","Label","Control","type","pattern","onChange","updateNewSku","updateNewName","updateNewQuantity","updateNewPrice","Button","size","faPlus","faCartPlus","React","ReactDOM","render","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2b31255b.chunk.js","sourcesContent":["import { render } from '@testing-library/react';\nimport React, { Component } from 'react';\n\nclass App extends Component {\n  \n  constructor(props) {\n    super();\n    this.state = {\n      orders: [],\n      isLoaded: false,\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://eshop-deve.herokuapp.com/api/v2/orders', {\n      method: 'GET',\n      headers: new Headers({\n        Authorization: `eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJkM2NIVUVibVJoc1EzeXhNbzV2VnliSTFzaDZCSDJZRCIsImlhdCI6MTU4NTkzMjYzNDU0OH0.tMSht_M3ryQl5IqCirhYR1gb8j3FQ26vILT4Qpx4XrdFz-zUmqbgFYiKTaZHPpB85etRIMhxVoZf6tOrHy0fnA`,\n      })\n    })\n      .then(response => response.json())\n      .then(json => {\n        this.setState({\n          isLoaded : true,\n          orders: json.orders,\n        })\n      })\n  }\n\n  render() {\n\n    var { isLoaded, orders} = this.state;\n\n    if (!isLoaded) {\n      return <div>Cargando datos...</div>\n    } else {\n      return (\n        <div className=\"App\">\n          <ul>\n            {orders.map(order => (\n              order.items.map(item => (\n                <li key ={item.id}>\n                  sku: {item.sku} | nombre: {item.name} | cantidad: {item.quantity} | precio: {item.price}\n                </li>\n              ))\n            ))}\n          </ul>\n        </div>\n        );\n      }\n    };\n  }\n  \n  export default App;\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport { Table, Navbar, Form, Container, Row, Col, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faPlus, faCartPlus } from '@fortawesome/free-solid-svg-icons'\r\nimport { faClipboardList } from '@fortawesome/free-solid-svg-icons'\r\nimport _ from 'lodash';\r\n\r\nexport default class Tabla extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n          orders: [],\r\n          newOrderItems : [],\r\n          newSku : '',\r\n          newName : '',\r\n          newQuantity : '',\r\n          newPrice : '',\r\n          isLoaded: false\r\n        }\r\n      }\r\n    \r\n      componentDidMount() {\r\n        fetch('https://eshop-deve.herokuapp.com/api/v2/orders', {\r\n          method: 'GET',\r\n          headers: new Headers({\r\n            Authorization: `eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJkM2NIVUVibVJoc1EzeXhNbzV2VnliSTFzaDZCSDJZRCIsImlhdCI6MTU4NTkzMjYzNDU0OH0.tMSht_M3ryQl5IqCirhYR1gb8j3FQ26vILT4Qpx4XrdFz-zUmqbgFYiKTaZHPpB85etRIMhxVoZf6tOrHy0fnA`,\r\n          })\r\n        })\r\n          .then(response => response.json())\r\n          .then(json => {\r\n            this.setState({\r\n              isLoaded : true,\r\n              orders: json.orders,\r\n            })\r\n          })\r\n      }\r\n\r\n    onOrderRowClickHandler = (e) => {\r\n        const hiddenElement = e.currentTarget.nextSibling;\r\n        hiddenElement.className.indexOf(\"collapse show\") > -1 ?\r\n                hiddenElement.classList.remove(\"show\") :\r\n                hiddenElement.classList.add(\"show\");\r\n        \r\n    };\r\n\r\n    updateNewSku(evt) {\r\n      this.setState({\r\n        newSku : evt.target.value\r\n      });\r\n    }\r\n\r\n    updateNewName(evt) {\r\n      this.setState({\r\n        newName : evt.target.value\r\n      });\r\n    }\r\n\r\n    updateNewQuantity(evt) {\r\n      this.setState({\r\n        newQuantity : evt.target.value\r\n      });\r\n    }\r\n\r\n    updateNewPrice(evt) {\r\n      this.setState({\r\n        newPrice : evt.target.value\r\n      });\r\n    }\r\n\r\n    onNewItemClickHandler = (e) => {\r\n      var newItem = {\r\n        id: _.uniqueId('NUEVA_'),\r\n        sku: this.state.newSku,\r\n        name: this.state.newName,\r\n        quantity : this.state.newQuantity,\r\n        price : this.state.newPrice\r\n      }\r\n      \r\n      this.setState(prevState => ({\r\n        ...prevState,\r\n        newOrderItems : [...prevState.newOrderItems, newItem]\r\n      }));\r\n    }\r\n\r\n    onAddOrderClickHandler = (e) => {\r\n      var newOrder = {\r\n        id: _.uniqueId('NUEVA_'),\r\n        items: this.state.newOrderItems\r\n      }\r\n\r\n      this.setState(prevState => ({\r\n        ...prevState,\r\n        newOrderItems: [],\r\n        orders : [...prevState.orders, newOrder]\r\n      }))\r\n    }\r\n    \r\n      render() {\r\n    \r\n        var { isLoaded, orders} = this.state;\r\n        \r\n        const orderRowstyle = {\r\n          padding: '3px',\r\n          lineHeight: '12px'\r\n        };\r\n\r\n        const orderDetailStyle = {\r\n          padding: '4px',\r\n          lineHeight: '12px'\r\n        }\r\n\r\n        const orderHeaderRow = (\r\n            <tr>\r\n                <th>SKU</th>\r\n                <th>Nombre</th>\r\n                <th>Cantidad</th>\r\n                <th>Precio</th>\r\n            </tr>);    \r\n\r\n        let itemRow = item => (\r\n          <tr style={orderDetailStyle} key ={item.id}>\r\n            <td> {item.sku} </td>\r\n            <td> {item.name} </td>\r\n            <td> {item.quantity} </td>\r\n            <td> ${item.price} </td>\r\n          </tr>\r\n        )\r\n\r\n        let orderRows = orders.map(order => (\r\n            <>\r\n                <tr style={orderRowstyle} onClick={this.onOrderRowClickHandler} key ={order.id}>\r\n                  <td colSpan=\"4\">\r\n                    <FontAwesomeIcon icon={faClipboardList}/> Orden #{order.id}\r\n                  </td>\r\n                </tr>\r\n                <tr className=\"collapse\">\r\n                  <td colSpan =\"4\">\r\n                    <table className=\"w-100\">\r\n                      <tbody>\r\n                        {orderHeaderRow}\r\n                        {order.items.map(item => itemRow(item))}\r\n                      </tbody>\r\n                    </table>\r\n                  </td>\r\n                </tr>\r\n            </>\r\n        ));\r\n       \r\n        const navbarHeader = (\r\n            <Navbar variant=\"secondary\">\r\n              <Navbar.Brand href=\"#\">Ordenes de Compra</Navbar.Brand>\r\n              <Navbar.Toggle />\r\n              <Navbar.Collapse className=\"justify-content-end\">\r\n                <Navbar.Text className=\"font-italic\">\r\n                    (Examen de José Rosales para Tendency Innovations)\r\n                </Navbar.Text>\r\n              </Navbar.Collapse>\r\n            </Navbar>\r\n        )\r\n    \r\n        if (!isLoaded) {\r\n          return <div>Cargando datos...</div>\r\n        } else {\r\n          return(\r\n            <>\r\n                {navbarHeader}\r\n                <Container className=\"mt-5 mb-5\">\r\n                <Row>\r\n                  <Col className=\"h4 text-center\">\r\n                    Haga click en cualquier orden para expandirla.\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col className=\"h5 text-center\">\r\n                    Puede ir al final de la pagina para agregar productos y ordenes nuevas.\r\n                  </Col>\r\n                </Row>\r\n                <Table striped bordered hover>\r\n                  <thead>\r\n                  </thead>\r\n                  <tbody>\r\n                    {orderRows}\r\n                  </tbody>\r\n                </Table>\r\n                <Form>\r\n                  <Row>\r\n                    <Col className=\"h3\">\r\n                      Nueva Orden\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col>\r\n                      <Table striped bordered hover variant=\"secondary\" className=\"w-100 text-center\">\r\n                        <thead>\r\n                        </thead>\r\n                        <tbody>\r\n                          {this.state.newOrderItems.length > 0 ? orderHeaderRow : null}\r\n                          {this.state.newOrderItems.map(item => itemRow(item))}\r\n                        </tbody>\r\n                      </Table>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col>\r\n                      <Form.Group controlId=\"newSKU\">\r\n                        <Form.Label> SKU </Form.Label>\r\n                        <Form.Control type=\"text\" pattern=\"[0-9]*\"\r\n                            onChange={evt => this.updateNewSku(evt)}>\r\n                        </Form.Control>\r\n                      </Form.Group>\r\n                    </Col>\r\n                    <Col>\r\n                      <Form.Group controlId=\"newName\">\r\n                        <Form.Label> Nombre </Form.Label>\r\n                        <Form.Control type=\"text\"\r\n                            onChange={evt => this.updateNewName(evt)}>\r\n                        </Form.Control>\r\n                      </Form.Group>\r\n                    </Col>\r\n                    <Col>\r\n                      <Form.Group controlId=\"newQuantity\">\r\n                        <Form.Label> Cantidad </Form.Label>\r\n                        <Form.Control type=\"text\" pattern=\"[0-9]*\"\r\n                            onChange={evt => this.updateNewQuantity(evt)}>\r\n                        </Form.Control>\r\n                      </Form.Group>\r\n                    </Col>\r\n                    <Col>\r\n                      <Form.Group controlId=\"newPrice\">\r\n                        <Form.Label> Precio </Form.Label>\r\n                        <Form.Control type=\"number\"\r\n                            onChange={evt => this.updateNewPrice(evt)}>\r\n                        </Form.Control>\r\n                      </Form.Group>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col>\r\n                      <Button onClick={this.onNewItemClickHandler} size=\"sm\">\r\n                      <FontAwesomeIcon icon={faPlus} /> Agregar Producto\r\n                      </Button>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col>\r\n                      <Button variant=\"success\" className=\"float-right\"\r\n                          onClick={this.onAddOrderClickHandler} size=\"bg\">\r\n                      <FontAwesomeIcon icon={faCartPlus} /> Agregar Orden\r\n                      </Button>\r\n                    </Col>\r\n                  </Row>\r\n                </Form>\r\n                </Container>\r\n            </>\r\n        )\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nexport default class Orden extends React.Component {\r\n    render() {\r\n        return(\r\n            <h1>Orden</h1>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootswatch/dist/sandstone/bootstrap.min.css\"; \nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Route, Index } from 'react-router-dom';\nimport Tabla from \"./js/pages/Tabla\";\nimport Orden from \"./js/pages/Orden\";\n\nReactDOM.render(\n    <Router>\n      <Route path=\"/\" component ={Tabla}>\n\n      </Route>\n    </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}